{"version":3,"sources":["firebase.js","AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AboutMe","props","className","onClick","this","hideInfo","Component","App","getUserValue","event","setState","userValue","target","value","submitValue","preventDefault","facts","dataImage","state","isNaN","alert","d","Date","getFullYear","parseInt","dbRef","database","ref","child","on","snapshot","console","log","val","data","bringInfo","showInfo","showDotOne","showDotTwo","showDotThree","hideInformation","altText","onSubmit","onChange","type","name","placeholder","required","style","display","width","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8503052.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n  // Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAbVRio1ryyYG92w3nbhyUp_rFC_CEqE7Y\",\r\n    authDomain: \"projectfive-8b8c7.firebaseapp.com\",\r\n    databaseURL: \"https://projectfive-8b8c7.firebaseio.com\",\r\n    projectId: \"projectfive-8b8c7\",\r\n    storageBucket: \"projectfive-8b8c7.appspot.com\",\r\n    messagingSenderId: \"558758889292\",\r\n    appId: \"1:558758889292:web:6cc62127d2f532d116b1e9\"\r\n};\r\n  // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\n\r\n\r\n\r\n\r\nclass AboutMe extends Component {\r\n    render(props) {\r\n        return (\r\n            <div className=\"main\">\r\n                <div>\r\n                    <h2>Instructions</h2>\r\n                    <p>Type in a year from 1800 - 1909 to find major events that occured!</p>\r\n                    <button className=\"buttonClass\" onClick={this.props.hideInfo}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AboutMe;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport AboutMe from './AboutMe';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      facts: \"\",\n      userValue: \"\",\n      showInfo: false,\n      dataImage: \"\",\n      showDotOne: \"dotOne\",\n      showDotTwo: \"dotTwo\",\n      showDotThree: \"dotThree\",\n    }\n  }\n\n\n\n  getUserValue = (event) => {\n\n    this.setState({userValue: event.target.value})\n\n  }\n\n\n  submitValue = (event) => {\n\n    event.preventDefault();\n    this.setState({\n      facts: \"\",\n      dataImage: \"\"\n    })\n    \n    if (this.state.userValue === \"\") {\n      alert(\"No value for this year, please enter a year between 1800 - 1909\");\n      return;\n    }\n\n    if ( isNaN(this.state.userValue)) {\n      alert(\"Please input a number value - check the how to use section for further information\");\n      return;\n    }\n\n    const d = new Date().getFullYear();\n\n    if ( parseInt(this.state.userValue) < 1800 || parseInt(this.state.userValue) > d ) {\n      alert(\"No data currently available for this year. Please input a year between 1800 - 1909\");\n      return;\n    }\n\n\n    const dbRef = firebase.database().ref(this.state.userValue);\n\n    const dbImageRef = firebase.database().ref('images');\n\n\n    const imageGrab = dbImageRef.child(this.state.userValue);\n    \n    \n    imageGrab.on('value', (snapshot) => {\n      console.log(snapshot.val());\n      if (snapshot.val() != null) {\n        this.setState({\n          dataImage: snapshot.val()}) \n        }\n      })\n        \n    dbRef.on('value', (snapshot) => {\n    \n\n      let data = snapshot.val();\n\n      \n      if (data === null) {\n        data=\"No current data on this year, check back later!\"\n      }\n\n      this.setState({\n        facts: data\n      })\n    })\n\n    console.log(this.state.dataImage);\n  }\n\n  bringInfo = (event) => {\n    event.preventDefault()\n    this.setState({\n        showInfo: true,\n        showDotOne: \"\",\n        showDotTwo: \"\",\n        showDotThree: \"\",\n      })\n  }\n\n  hideInformation = (event) => {\n    event.preventDefault()\n    this.setState({\n      showInfo: false,\n      showDotOne: \"dotOne\",\n      showDotTwo: \"dotTwo\",\n      showDotThree: \"dotThree\",\n    })\n  }\n\n  render() {\n\n    const altText = `Image of year ${this.state.userValue}`\n\n    return (\n      \n      <div className=\"App\">\n\n        {this.state.showInfo\n        ?<AboutMe hideInfo = {this.hideInformation} />\n        :null}\n        <div className=\"mainPage\">\n          <h1>What happened <br/> in th<span>e</span> year<span className={this.state.showDotOne}>.</span><span className={this.state.showDotTwo}>.</span><span className={this.state.showDotThree}>.</span></h1>\n\n          <form onSubmit={this.submitValue}>\n\n            <label className=\"sr-only\">\n              Type in a year from 1800 - 1909\n            </label>\n\n            <input onChange={this.getUserValue} type=\"text\" name=\"name\" placeholder=\"Type in a year from 1800 - 1909\" required></input>\n\n            <button className=\"buttonClass\">Submit</button>\n\n          </form>\n          <button className=\"buttonClass\" onClick={this.bringInfo}>How to use</button>\n          <div className=\"contentWrapper\">\n            <div style={{display: this.state.facts != \"\" ? 'block' : 'none' }} className=\"textDiv\">\n              <h2>In the year {this.state.userValue}<span className={this.state.showDotOne}>.</span><span className={this.state.showDotTwo}>.</span><span className={this.state.showDotThree}>.</span></h2>\n              <div>\n              <p style={{width: this.state.dataImage === \"\" ? '100%' : '50%' }}>{this.state.facts}</p>\n              {this.state.dataImage === \"\" \n              ?null\n              :<img src={this.state.dataImage} alt={altText} />}\n              </div>\n            </div>\n          </div>\n\n\n        </div>\n          <footer>Created by Aymen Mahmod at Juno College</footer>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}